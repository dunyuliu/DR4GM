#! /usr/bin/env python3 
from ComputeGroundMotionParametersFromSurfaceOutput_Hybrid_Lite import low_pass_filter, compute_cav_gmrot, gmrotdpp_withPG
import numpy as np
import os

class dataLoader:
    def __init__(self):
        self.accx = None
        self.accy = None

    def loadEqdynaAcc(self, filePath, fName):
        accxFullPath = filePath+'/'+fName+'.accx.txt'
        accyFullPath = filePath+'/'+fName+'.accy.txt'
        try: 
            self.accx = np.loadtxt(accxFullPath)
            self.accy = np.loadtxt(accyFullPath)
        except FileNotFoundError:
            print(f"ERROR: file {accxFullPath} not found.")

def checkFileReport(fn):
    # Check if a file exists.
    # If not, print error message.
    #
    exist = True
    if os.path.isfile(fn) == False:
        exist = False
        print(" no file " + fn)
    return exist

def calcGMMetricsOneStation(stName, filePath, par=None):
    #checkFileReport(filePath+'/user_defined_params.py') 
    checkFileReport(filePath+'/'+stName+'.accx.txt')
    checkFileReport(filePath+'/'+stName+'.accy.txt')

    seismogram = dataLoader()
    seismogram.loadEqdynaAcc(filePath, stName)
    accx = seismogram.accx
    accy = seismogram.accy
    dt = 0.008*10 #par.dt*10 # sampling rate in EQdyna 
    periods = np.array([0.100, 0.125, 0.25, 0.4, 0.5, 0.75, 1, 1.5, 2, 2.5, 5])
    result = gmrotdpp_withPG(accx, dt, accy, dt, periods, percentile=50, damping=0.05, units='cm/s/s', method='Nigam-Jennings')
    return result

def _main_func(description):
    res = calcGMMetricsOneStation('st.x10.y5.0191', './')
    print(res)

if __name__ == "__main__":
    _main_func(__doc__)
