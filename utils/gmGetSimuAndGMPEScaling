#! /usr/bin/env python3

import os,sys
import numpy as np
import matplotlib.pyplot as plt

def calcGMStatsVsR(values, mapOfR, RBin):
    ny, nx = values.shape

    gmMetricsVsR = np.zeros((len(RBin)-1,50000))
    logGMMetrics = np.zeros((len(RBin)-1,50000))
    gmMetricsStats = np.zeros((len(RBin)-1,6))
    numOfGMMetricsPerR = np.zeros(len(RBin)-1, dtype=int)

    iSt = 0
    for ix in range(nx):
        for iy in range(ny):
            iSt += 1
            for iR in range(len(RBin)-1):
                if mapOfR[iy,ix]>=RBin[iR] and mapOfR[iy,ix]<RBin[iR+1] and abs(values[iy,ix])>0.:
                   gmMetricsVsR[iR,numOfGMMetricsPerR[iR]] = values[iy,ix]
                   numOfGMMetricsPerR[iR] += 1

    for iR in range(len(RBin)-1):
        sumLogX = 0
        sumSqLogX = 0
        for iS in range(numOfGMMetricsPerR[iR]):
            logGMMetrics[iR,iS] = np.log(gmMetricsVsR[iR,iS])
            sumLogX = sumLogX + logGMMetrics[iR,iS]
            sumSqLogX = sumSqLogX + (logGMMetrics[iR,iS])**2
       
        if numOfGMMetricsPerR[iR]>1:
            meanLogX = sumLogX/numOfGMMetricsPerR[iR]
            meanSqLogX = sumSqLogX/(numOfGMMetricsPerR[iR]-1)
            stdLogX = (meanSqLogX - meanLogX**2*numOfGMMetricsPerR[iR]/(numOfGMMetricsPerR[iR]-1))**0.5
            minX = np.min(gmMetricsVsR[iR,:numOfGMMetricsPerR[iR]])
            maxX = np.max(gmMetricsVsR[iR,:numOfGMMetricsPerR[iR]])
        else:
            meanLogX = 0.
            meanSqLogX =0.
            stdLogX = 0.
            minX = 0.
            maxX = 0.

        gmMetricsStats[iR,0] = np.exp(meanLogX)
        gmMetricsStats[iR,1] = stdLogX
        gmMetricsStats[iR,2] = minX
        gmMetricsStats[iR,3] = maxX

    return gmMetricsStats

def errorMessage():
    print(' ')
    print(' Usage getScaling RBinRange0 RBinRange1 RBinSize')
    print(' NOTE: all parameters are in meters')
    print(' ')

def makeScalingPlot(stats, RBin, var):
    fontsize = 16
    fig, ax = plt.subplots(2,1, figsize=(8,12))

    ax[0].semilogy(RBin[:-1], stats[:,0], label='mean', linewidth=2)
    ax[0].semilogy(RBin[:-1], stats[:,2], label='min', linewidth=2)
    ax[0].semilogy(RBin[:-1], stats[:,3], label='max', linewidth=2)
    ax[0].set_ylabel(var,fontsize=fontsize)
    ax[0].legend()

    ax[1].plot(RBin[:-1], stats[:,1], label='intra-event variability', linewidth=2)
    ax[1].set_xlabel('Rjb (m)', fontsize=fontsize)
    ax[1].set_ylabel(var, fontsize=fontsize)
    ax[1].legend()
    plt.tight_layout()
    plt.savefig('gm'+var+'StatsVsR.png', dpi=300, bbox_inches='tight')

def main():
    if os.path.isfile('gmMetricsValues.npz')==False:
        print('ERROR: missing ground motion metrics data; please provide gmMetricsValues.npz')
        sys.exit()
    if os.path.isfile('gmStInfoValues.npz')==False:
        print('ERROR: missing station info data; please provide gmStInfo.npz')
        sys.exit()
    
    args = sys.argv
    print(args)
    if len(args) !=4:
        errorMessage()
        sys.exit()

    RBinRange = (float(sys.argv[1]), float(sys.argv[2]))
    RBinSize = float(sys.argv[3])

    gmMetrics = np.load('gmMetricsValues.npz')
    stInfo = np.load('gmStInfoValues.npz')

    numOfBins = int((RBinRange[1]-RBinRange[0])/RBinSize)
    RBin = np.linspace(RBinRange[0], RBinRange[1], numOfBins+1)

    for key in gmMetrics:
        stats = calcGMStatsVsR(gmMetrics[key], stInfo['Rjb'], RBin)
        makeScalingPlot(stats, RBin+RBinSize/2., key)
        statsDict = {
                'mean': stats[:,0],
                'std': stats[:,1],
                'min': stats[:,2],
                'max': stats[:,3],
                'R': RBin[:-1]+RBinSize/2.}
        np.savez('gmStats'+key+'.npz', **statsDict)

def _main_func(description):
    main()

if __name__ == "__main__":
    _main_func(__doc__)

