#! /usr/bin/env python3
"""
# gmProcessor is part of dr4gm. 
# It processes the raw GM data from EQdyna, and XX, and XX to GM metrics.
"""
import sys, os
import numpy as np
from gmFuncLib import *

def errorMessage():
    print(' Usage of gmProcessor:')
    print(' To generate 2-D maps of ground motion metrics, please type')
    print('     gmProcessor xMin xMax yMin yMax gridSize')
    print(' To process a single station, please type')
    print('     gmProcessor x y')
    print(' ')
    print(' NOTE: All parameters are in meters.' )
    print(' ')

def gmProcessor(): 
    args = sys.argv
    if len(args) !=6 and len(args) !=3:
        errorMessage()
    
    print('GM PROCESSOR - START ... ...')
    print(' ')

    if os.path.isfile('gmStLocIndex.txt')==False:
        stLocIndex = buildStLocIndex(1000)
    else:
        stLocIndex = np.loadtxt('gmStLocIndex.txt')
        
    if len(args) == 6:
        print(' Processing a 2-D map of stations.')
        print(args)
        print(' ')
        xMin = float(args[1])
        xMax = float(args[2])
        yMin = float(args[3])
        yMax = float(args[4])
        gridSize = float(args[5])
        gmPar = parametersForGM()
        getGMMetricsFor2DMap([xMin,xMax], [yMin,yMax], gridSize, stLocIndex, gmPar)

    elif len(args) == 3:
        print(' Processing a single station.')
        print(args)
        print(' ')
        x = float(args[1])
        y = float(args[2])
        gmPar = parametersForGM()
        stLoc = np.array([x, y, 0])
        gmPar.plotTimeseries = True
        gm0 = getGMMetricsForOneSt(stLoc, stLocIndex, gmPar)
        print(gm0)
        print(' ')

    print("GM PROCESSOR - END ... ...")

def _main_func(description):
    gmProcessor()

if __name__ == "__main__":
    _main_func(__doc__)

